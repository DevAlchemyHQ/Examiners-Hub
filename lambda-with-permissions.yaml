AWSTemplateFormatVersion: "2010-09-09"
Description: "Lambda function with S3 permissions for ZIP generation"

Parameters:
  S3BucketName:
    Type: String
    Default: "mvp-labeler-storage"
    Description: "S3 bucket name for storing images and ZIP files"

Resources:
  # Lambda execution role with S3 permissions
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: download-generator-role-with-s3
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: S3AccessPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:ListBucket
                Resource:
                  - !Sub "arn:aws:s3:::${S3BucketName}"
                  - !Sub "arn:aws:s3:::${S3BucketName}/*"

  # Lambda function
  DownloadGeneratorFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: download-generator-with-permissions
      Runtime: nodejs18.x
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          import { S3Client, GetObjectCommand, PutObjectCommand } from '@aws-sdk/client-s3';
          import { getSignedUrl } from '@aws-sdk/s3-request-presigner';
          import JSZip from 'jszip';

          const s3Client = new S3Client({ region: 'eu-west-2' });

          export const handler = async (event) => {
            try {
              console.log('Lambda function started');
              console.log('Event:', JSON.stringify(event, null, 2));

              const { selectedImages, formData } = event;

              if (!selectedImages || !Array.isArray(selectedImages)) {
                throw new Error('No selected images provided');
              }

              console.log(`Processing ${selectedImages.length} images`);

              const zip = new JSZip();

              for (const image of selectedImages) {
                try {
                  console.log(`Processing image: ${image.filename || image.id}`);

                  const getObjectCommand = new GetObjectCommand({
                    Bucket: process.env.S3_BUCKET_NAME,
                    Key: image.s3Key
                  });

                  const response = await s3Client.send(getObjectCommand);
                  
                  const chunks = [];
                  for await (const chunk of response.Body) {
                    chunks.push(chunk);
                  }
                  const buffer = Buffer.concat(chunks);

                  zip.file(image.filename || `image-${image.id}.jpg`, buffer);
                  console.log(`Added ${image.filename} to ZIP`);

                } catch (error) {
                  console.error(`Error processing image ${image.filename}:`, error);
                }
              }

              const zipBuffer = await zip.generateAsync({ type: 'nodebuffer' });
              console.log(`Generated ZIP file: ${zipBuffer.length} bytes`);

              const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
              const projectName = formData?.projectName || 'download';
              const zipFileName = `${projectName}-${timestamp}.zip`;

              const putObjectCommand = new PutObjectCommand({
                Bucket: process.env.S3_BUCKET_NAME,
                Key: `downloads/${zipFileName}`,
                Body: zipBuffer,
                ContentType: 'application/zip'
              });

              await s3Client.send(putObjectCommand);
              console.log(`Uploaded ZIP to S3: downloads/${zipFileName}`);

              const getSignedUrlCommand = new GetObjectCommand({
                Bucket: process.env.S3_BUCKET_NAME,
                Key: `downloads/${zipFileName}`
              });

              const presignedUrl = await getSignedUrl(s3Client, getSignedUrlCommand, { expiresIn: 3600 });
              console.log('Generated presigned URL');

              return {
                statusCode: 200,
                headers: {
                  'Content-Type': 'application/json',
                  'Access-Control-Allow-Origin': '*',
                  'Access-Control-Allow-Headers': 'Content-Type',
                  'Access-Control-Allow-Methods': 'GET, POST, OPTIONS'
                },
                body: JSON.stringify({
                  success: true,
                  downloadUrl: presignedUrl,
                  filename: zipFileName,
                  message: `Successfully created ZIP with ${selectedImages.length} images`
                })
              };

            } catch (error) {
              console.error('Lambda function error:', error);
              return {
                statusCode: 500,
                headers: {
                  'Content-Type': 'application/json',
                  'Access-Control-Allow-Origin': '*',
                  'Access-Control-Allow-Headers': 'Content-Type',
                  'Access-Control-Allow-Methods': 'GET, POST, OPTIONS'
                },
                body: JSON.stringify({
                  success: false,
                  error: error.message,
                  message: 'Failed to create ZIP file'
                })
              };
            }
          };
      Timeout: 30
      MemorySize: 512
      Environment:
        Variables:
          S3_BUCKET_NAME: !Ref S3BucketName

Outputs:
  LambdaFunctionArn:
    Description: "ARN of the Lambda function"
    Value: !GetAtt DownloadGeneratorFunction.Arn
    Export:
      Name: !Sub "${AWS::StackName}-LambdaArn"

  LambdaFunctionName:
    Description: "Name of the Lambda function"
    Value: !Ref DownloadGeneratorFunction
    Export:
      Name: !Sub "${AWS::StackName}-LambdaName"
